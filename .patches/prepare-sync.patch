- add SyncSource::prepareSync()
- adds several comments to clarify what the prepare/begin/endSync()
  are allowed and expected to do
- replaces one getSyncMode() with getPreferredSyncMode() because at
  that time getSyncMode() normally wouldn't be set yet
- if an error has been set already in SyncManager::beginSync(), do
  not overwrite it with a follow-up error
- the prepare/begin/endSync() all have empty default implementations:
  that means that clients not implementing the new prepareSync()
  still work and while I made that change, I applied the same logic
  to the other functions for consistency reasons (and those sources
  which really do not need these functions...)

#
# Patch managed by http://www.holgerschurig.de/patcher.html
#

--- native/src/c++/common/spds/SyncManager.cpp~prepare-sync
+++ native/src/c++/common/spds/SyncManager.cpp
@@ -198,20 +198,35 @@
             check[count] = 0;
         }
     }
-    
+
+    // give all SyncSources a chance to prepare and/or override settings
     for (count = 0; count < sourcesNumber; count ++) {
         if (!check[count])
             continue;
 
-        if (sources[count]->getSyncMode() == SYNC_NONE) {
+        int prepareSyncError = sources[count]->prepareSync();
+        if (prepareSyncError) {
+            ret = lastErrorCode = ERR_UNSPECIFIED;
+            check[count] = 0;
+        }
+    }
+
+    // disable all SyncSources without a preferred sync mode
+    for (count = 0; count < sourcesNumber; count ++) {
+        if (!check[count])
+            continue;
+
+        if (sources[count]->getPreferredSyncMode() == SYNC_NONE) {
             check[count] = 0;
         }
     }
         
     if (isToExit(check, sourcesNumber)) {
-        // error. no source to sync
-        ret = lastErrorCode = ERR_NO_SOURCE_TO_SYNC;
-        bsprintf(lastErrorMsg, ERRMSG_NO_SOURCE_TO_SYNC);
+        if (!ret) {
+            // error: no source to sync
+            ret = lastErrorCode = ERR_NO_SOURCE_TO_SYNC;
+            bsprintf(lastErrorMsg, ERRMSG_NO_SOURCE_TO_SYNC);
+        }
 
         goto finally;
     }
--- native/src/c++/common/spds/SyncSource.cpp~prepare-sync
+++ native/src/c++/common/spds/SyncSource.cpp
@@ -202,18 +202,17 @@
     return syncMode;
 }
 
-/*
- * Ends the synchronization of the specified source.
- *
- * @param source - the SyncSource to sync
- 
-int SyncSource::endSync(SyncSource& source) {
-    //
-    // TBD
-    //
+int SyncSource::prepareSync() {
+    return 0;
+}
+
+int SyncSource::beginSync() {
+    return 0;
+}
+
+int SyncSource::endSync() {
     return 0;
 }
-*/
 
 /*
  * Returns the timestamp in milliseconds of the last synchronization.
--- native/src/include/common/spds/SyncSource.h~prepare-sync
+++ native/src/include/common/spds/SyncSource.h
@@ -146,28 +146,57 @@
     */
     void setFilter(SourceFilter* f);
 
+    /*
+     * Called by the engine from inside SyncClient::sync()
+     * right after initializing the SyncSource with its
+     * configuration and before doing anything with the
+     * configuration settings.
+     *
+     * The SyncSource can modify the settings or do
+     * initializations which do not yet need feedback
+     * from the server, but in particular the real sync
+     * mode is not known yet.
+     *
+     * The synchronization stops if this function return a non-zero value.
+     *
+     * @return - 0 on success, an error otherwise
+     */
+    virtual int prepareSync() EXTRA_SECTION_01;
 
     /*
-     * Called by the engine at the begin of the sync.
+     * Called by the engine from inside SyncClient::sync()
+     * at the begin of the sync.
+     *
      * The SyncSource can do every initialization it needs.
+     * The server has been contacted, so in particular
+     * getSyncMode() can now be used to find out what
+     * the sync mode for this synchronization run will be.
+     * After this call the iterators for SyncItems must return
+     * valid results for the current sync mode.
+     *
      * The synchronization stops if this function return a non-zero value.
      * 
      * @return - 0 on success, an error otherwise
      */
-    virtual int beginSync() = 0 EXTRA_SECTION_01;
+    virtual int beginSync() EXTRA_SECTION_01;
     
     /*
-     * Called by the engine at the begin of the sync.
-     * The SyncSource can do any needed commit action to save the state of
-     * the items.
-     * The engine commits to the server the changes applied in the transaction 
-     * only if this function return 0
+     * Called by the engine from inside SyncClient::sync()
+     * at the end of the sync.
+     *
+     * The SyncSource can do any needed commit action to save
+     * the state of the items. The engine commits to the server
+     * the changes applied in the transaction only if this function
+     * return 0.
+     *
+     * FIXME: the return code is currently ignored by the sync engine
      * 
      * @return - 0 on success, an error otherwise
      */
-    virtual int endSync() = 0 EXTRA_SECTION_01;
+    virtual int endSync() EXTRA_SECTION_01;
         
     virtual void setItemStatus(const wchar_t* key, int status) = 0 EXTRA_SECTION_01;
+
     /*
      * Return the key of the first SyncItem of all.
      * It is used in case of refresh sync 
