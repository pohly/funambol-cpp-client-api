(Curl)TransportAgent:
- did not set userAgent member in constructor,
  causing an uninitialized memory read in the
  CurlTransportAgent constructor
- CurlTransportAgent needs to be notified of
  userAgent modifications, therefore made all
  calls in TransportAgent virtual and added
  CurlTransportAgent::setUserAgent

Client API:
- SyncClient replaces Sync4jClient: API is backwards
  compatible, code using Sync4jClient compiles without
  changes
- SyncClient is expected to be subclassed by client
  to override certain functions which will be called
  by SyncManager, but reasonable defaults will be
  provided for all such calls

SyncManager:
- the new SyncClient::getClientID() is used as default
  value for the HTTP user agent string if nothing was
  specified in the config
- fix for uninitialized memory (and potential crashes)
  when constructing a SyncManager and immediately
  deleting it again

#
# Patch managed by http://www.holgerschurig.de/patcher.html
#

--- native/src/c++/common/client/Sync4jClient.cpp~client-version-useragent
+++ native/src/c++/common/client/Sync4jClient.cpp
@@ -28,13 +28,13 @@
 Sync4jClient* Sync4jClient::instance = 0;
 
 //--------------------------------------------------- Constructor & Destructor
-Sync4jClient::Sync4jClient() {
+SyncClient::SyncClient() {
     syncManager  = NULL;
     defaultErrorHandler = new LogErrorHandler();
     errorHandler = defaultErrorHandler;
 }
 
-Sync4jClient::~Sync4jClient() {
+SyncClient::~SyncClient() {
     if(syncManager)
         delete syncManager;
     if(defaultErrorHandler)
@@ -43,8 +43,14 @@
 
 //------------------------------------------------------------- Public Methods
 
+Sync4jClient::Sync4jClient() {
+}
+
+Sync4jClient::~Sync4jClient() {
+}
+
 /*
- * Get, or create, Sync4jClient instance 
+ * Get, or create, SyncClient instance 
  */
 Sync4jClient& Sync4jClient::getInstance() {
     
@@ -70,7 +76,7 @@
 /*
  * Set config from user defined Config
  */
-void Sync4jClient::setDMConfig(DMTClientConfig& config) {
+void SyncClient::setDMConfig(DMTClientConfig& config) {
     if (syncManager)
         delete syncManager;
 
@@ -78,29 +84,28 @@
         delete defaultConfig; 
         defaultConfig = NULL;
     }
-    syncManager = new SyncManager(config);
+    syncManager = new SyncManager(*this, config);
 }
 
 /*
  * Set config from DM using an application URI
  */
-void Sync4jClient::setDMConfig(const BCHAR *root) {
+void SyncClient::setDMConfig(const BCHAR *root) {
     if (defaultConfig)
         delete defaultConfig;
     if (syncManager)
         delete syncManager;
 
     defaultConfig = new DMTClientConfig(root);
-    defaultConfig->read();    
-    syncManager = new SyncManager(*defaultConfig);
-
+    defaultConfig->read();
+    syncManager = new SyncManager(*this, *defaultConfig);
 }
 
-ErrorHandler& Sync4jClient::getErrorHandler() {
+ErrorHandler& SyncClient::getErrorHandler() {
     return *errorHandler;
 }
 
-void Sync4jClient::setErrorHandler(ErrorHandler& e) {
+void SyncClient::setErrorHandler(ErrorHandler& e) {
     if (defaultErrorHandler) {
         delete defaultErrorHandler; defaultErrorHandler = NULL;
     }    
@@ -112,7 +117,7 @@
 * Used to start the sync process. The argument is an array of SyncSources
 * that have to be synched with the sync process
 */
-int Sync4jClient::sync(SyncSource** sources) {
+int SyncClient::sync(SyncSource** sources) {
 
     resetError();
     int ret = 0;
@@ -155,26 +160,3 @@
 }
 
 
-#if 0
-/*
- * Used to start the sync process. The argument is an array of SyncSource
- * that have to be synched
- *
- * @param sources the SyncSource& array
- */
-int Sync4jClient::sync(ArrayList& sources) {
-    const int ml = 10;
-    int l = sources.size();
-
-    SyncSource* array[ml];
-    
-    for (int i=0; (i<l) && (i<ml-1); ++i) {
-        array[i] = (SyncSource*)sources[i];
-    }
-
-    array[l] = NULL;
-
-    return sync(array);
-}
-
-#endif
--- native/src/c++/common/http/TransportAgent.cpp~client-version-useragent
+++ native/src/c++/common/http/TransportAgent.cpp
@@ -30,6 +30,7 @@
     url     = newURL ;
     timeout = timeout;
     maxmsgsize  = maxmsgsize;
+    userAgent[0] = 0;
 }
 
 TransportAgent::~TransportAgent() {
@@ -74,4 +75,4 @@
 
 BCHAR* TransportAgent::getUserAgent() {
     return stringdup(userAgent);
-}
\ No newline at end of file
+}
--- native/src/c++/common/spds/SyncManager.cpp~client-version-useragent
+++ native/src/c++/common/spds/SyncManager.cpp
@@ -30,6 +30,7 @@
 #include "spds/spdsutils.h"
 #include "syncml/core/TagNames.h"
 #include "syncml/core/ObjectDel.h"
+#include "client/Sync4jClient.h"
 
 /**
  * Is the given status code an error status code? Error codes are the ones
@@ -64,19 +65,32 @@
     return true;
 }
 
-SyncManager::SyncManager(SyncManagerConfig* c) : config(*c) {
+SyncManager::SyncManager(SyncClient &cl, SyncManagerConfig* c) : client(cl), config(*c) {
     initialize();
 }
 
-SyncManager::SyncManager(SyncManagerConfig& c) : config(c) {
+SyncManager::SyncManager(SyncClient &cl, SyncManagerConfig& c) : client(cl), config(c) {
     initialize();
 }
 
 void SyncManager::initialize() {
+    // set all values which are checked by the destructor;
+    // previously some pointers were only set later, leading to
+    // uninitialized memory reads and potential crashes when
+    // constructing a SyncManager, but not using it
+    transportAgent = NULL;
+    mappings       = NULL;
+    sources        = NULL;
+    currentState   = STATE_START;
+    mappings       = NULL;
+    check          = NULL;
+    sourcesNumber  = 0;
+    sources        = NULL;
+    count          = 0;
+    commands       = NULL;
+
     AccessConfig& c = config.getAccessConfig();   
     
-    credentialHandler = CredentialHandler();
-
     bstrncpy(syncURL, c.getSyncURL(), 511);
     bstrncpy(deviceId, c.getDeviceId(), 31);
     
@@ -91,15 +105,7 @@
     credentialHandler.setServerAuthType     (c.getServerAuthType());
     credentialHandler.setServerAuthRequired (c.getServerAuthRequired());
             
-    transportAgent = NULL;
-    
-    currentState = STATE_START;
-
     commands = new ArrayList();
-    mappings      = NULL;
-    check         = NULL;
-    sourcesNumber = 0;
-    count         = 0;
 
     maxMsgSize   = c.getMaxMsgSize();
     maxModPerMsg = 150;  // dafault value
@@ -114,7 +120,8 @@
     memset(userAgent, 0, 128*sizeof(BCHAR));
     bstrcpy(userAgent, c.getUserAgent());
     if (bstrlen(userAgent) == 0) {
-        bstrcpy(userAgent, BCHAR_USER_AGENT);
+        const BCHAR *clientID = client.getClientID();
+        bstrcpy(userAgent, clientID ? clientID : BCHAR_USER_AGENT);
     }
                   
     syncMLBuilder.set(syncURL, deviceId, maxMsgSize);
@@ -1458,7 +1465,7 @@
 }
 
 
-BOOL SyncManager::commitChanges(SyncSource& source) {
+BOOL SyncManager::commitChanges(SyncSource& source) { 
     unsigned int n = config.getSyncSourceConfigsCount();
     SyncSourceConfig* configs = config.getSyncSourceConfigs();
 
--- native/src/c++/posix/http/CurlTransportAgent.cpp~client-version-useragent
+++ native/src/c++/posix/http/CurlTransportAgent.cpp
@@ -65,7 +65,6 @@
         curl_easy_setopt(easyhandle, CURLOPT_ERRORBUFFER, this->curlerrortxt );
         curl_easy_setopt(easyhandle, CURLOPT_AUTOREFERER, TRUE);
         curl_easy_setopt(easyhandle, CURLOPT_FOLLOWLOCATION, TRUE);
-        curl_easy_setopt(easyhandle, CURLOPT_USERAGENT, userAgent[0] ? userAgent : "Funambol POSIX SyncML client");
         if (proxy.host[0]) {
             curl_easy_setopt(easyhandle, CURLOPT_PROXY, proxy.host);
             if (proxy.port) {
@@ -77,8 +76,19 @@
             }
         }
     }
+    setUserAgent("Funambol POSIX SyncML client");
+}
+
+void CurlTransportAgent::setUserAgent(BCHAR* ua) {
+    if (ua) {
+        TransportAgent::setUserAgent(ua);
+        if (easyhandle) {
+            curl_easy_setopt(easyhandle, CURLOPT_USERAGENT, userAgent);
+        }
+    }
 }
 
+
 CurlTransportAgent::~CurlTransportAgent() {
     if (easyhandle) {
         curl_easy_cleanup(easyhandle);
--- native/src/include/common/client/Sync4jClient.h~client-version-useragent
+++ native/src/include/common/client/Sync4jClient.h
@@ -30,51 +30,75 @@
     class SyncManager;
 
     /**
-     * This class wrap the common operations requested by the client to
-     * handle a synchronization. It uses the signleton pattern to make
+     * This class wraps the common operations executed by a typical
+     * client. It contains default implementations for calls invoked
+     * by the library core to parameterize or control the
+     * synchronization. A client can override these calls by
+     * subclassing SyncClient and using an instance of its own class
+     * instead.
+     * 
+     * Warning: the library contains global data in several different
+     * places. Therefore it is not possible to execute multiple
+     * sessions in parallel.
+     */
+    class SyncClient {
+      public:
+        SyncClient();
+        virtual ~SyncClient();
+        
+        // set the default client configuration (using context root)
+        virtual void setDMConfig(const BCHAR* root);
+        // set a client-provided DMTree config
+        virtual void setDMConfig(DMTClientConfig& c);
+
+        // get the defined error handler
+        virtual ErrorHandler& getErrorHandler();
+        // set a custom error handler
+        virtual void setErrorHandler(ErrorHandler& e);
+
+        /**
+         * Optionally get a short version string describing the client, f.i.
+         * "Foo SyncML Client 1.0"
+         *
+         * Currently used as HTTP transport agent unless overriddent by the
+         * userAgent config property, will later also be embedded in device infos
+         * sent to server.
+         *
+         * @return a pointer to a string owned by the client, NULL if not available
+         */
+        virtual const BCHAR *getClientID() { return NULL; }
+
+        /*
+         * Execute a synchronization on the specified sources.
+         *
+         * @param sources - NULL terminated array of sources to sync.
+         *
+         * @return - 0 on success, an error otherwise
+         */
+        virtual int sync(SyncSource** sources);
+
+      private:
+        SyncManager* syncManager;
+        ErrorHandler* errorHandler;
+    };
+
+
+    /**
+     * This is the legacy API. It uses the singleton pattern to make
      * sure that only one instance of the client is active on the client
      * program. 
      */
-    class Sync4jClient {
+     class Sync4jClient : public SyncClient {
 
         public:
             // get and release singleton instance
             static Sync4jClient& getInstance();
             static void dispose();
-            // set the default client configuration (using context root)
-            void setDMConfig(const BCHAR* root);
-            // set a client-provided DMTree config
-            void setDMConfig(DMTClientConfig& c);
-
-            // get the defined error handler
-            ErrorHandler& getErrorHandler();
-            // set a custom error handler
-            void setErrorHandler(ErrorHandler& e);
-
-            /*
-             * Start a synchronization on the specified sources.
-             *
-             * @param sources - NULL terminated array of sources to sync.
-             *
-             * @return - 0 on success, an error otherwise
-             */
-            int sync(SyncSource** sources);
-
-            /*
-             * Used to start the sync process. The argument is an array of SyncSource
-             * that have to be synched
-             *
-             * @param sources the SyncSource& array
-             */
-            int sync(ArrayList& sources);
 
         private:
 
             static Sync4jClient* instance;
 
-            SyncManager* syncManager;
-            ErrorHandler* errorHandler;
-
             // private constructor and destructor
             Sync4jClient();
             ~Sync4jClient();
--- native/src/include/common/http/TransportAgent.h~client-version-useragent
+++ native/src/include/common/http/TransportAgent.h
@@ -73,52 +73,52 @@
          *
          * @param url the new target url
          */
-        void setURL(URL& newURL) EXTRA_SECTION_03;
+        virtual void setURL(URL& newURL) EXTRA_SECTION_03;
 
         /*
          * Returns the url.
          */
-        URL& getURL() EXTRA_SECTION_03;
+        virtual URL& getURL() EXTRA_SECTION_03;
 
         /**
          * Sets the connection timeout
          *
          * @param t the new timeout in seconds
          */
-        void setTimeout(unsigned int t) EXTRA_SECTION_03;
+        virtual void setTimeout(unsigned int t) EXTRA_SECTION_03;
 
         /**
          * Returns the connection timeout
          */
-        unsigned int getTimeout() EXTRA_SECTION_03;
+        virtual unsigned int getTimeout() EXTRA_SECTION_03;
         
         /**
          * Sets the max msg size
          *
          * @param t the new msx msg size in bytes
          */
-        void setMaxMsgSize(unsigned int t) EXTRA_SECTION_03;
+        virtual void setMaxMsgSize(unsigned int t) EXTRA_SECTION_03;
          
         /**
          * Returns the max msg size
          */
-        unsigned int getMaxMsgSize()EXTRA_SECTION_03;
+        virtual unsigned int getMaxMsgSize()EXTRA_SECTION_03;
 
         /**
          * Sets the buffer size
          *
          * @param t the buffer size size in bytes
          */
-        void setReadBufferSize(unsigned int t) EXTRA_SECTION_03;
+        virtual void setReadBufferSize(unsigned int t) EXTRA_SECTION_03;
         
-        void setUserAgent(BCHAR* ua);
+        virtual void setUserAgent(BCHAR* ua);
 
-        BCHAR* getUserAgent();
+        virtual BCHAR* getUserAgent();
 
         /**
          * Returns the buffer size
          */
-        unsigned int getReadBufferSize()EXTRA_SECTION_03;
+        virtual unsigned int getReadBufferSize()EXTRA_SECTION_03;
 
 
         /*
--- native/src/include/common/spds/SyncManager.h~client-version-useragent
+++ native/src/include/common/spds/SyncManager.h
@@ -29,7 +29,7 @@
 #include "spds/CredentialHandler.h"
 #include "spds/CredentialHandler.h"
 
-
+class SyncClient;
 
 typedef enum {
                 STATE_START        = 0,
@@ -41,14 +41,28 @@
                 STATE_PKG5_SENT    = 6
              } SyncManagerState ;
 
-
+//
+// This is the core class which encodes the flow of messages between
+// client and server throughout a session. It is configured via the
+// DMTClientConfig with which it is constructed by the
+// SyncClient::setDMConfig().
+//
+// The client built on top of this system has some possibilities
+// to hook into the session and influence it:
+// - the SyncManager::prepareSync() calls each source's prepareSync()
+//   and thus subclassed SyncSource's can do something at that time
+//   to change their own settings
+// - the SyncClient instance is passed to the SyncManager; this class
+//   can (but doesn't have to be) subclassed to override or modify some of
+//   its methods
+//
 class SyncManager {
 
     public:
-        SyncManager(SyncManagerConfig* config) EXTRA_SECTION_01;
-        SyncManager(SyncManagerConfig& config) EXTRA_SECTION_01;
+        SyncManager(SyncClient &client, SyncManagerConfig* config) EXTRA_SECTION_01;
+        SyncManager(SyncClient &client, SyncManagerConfig& config) EXTRA_SECTION_01;
         ~SyncManager() EXTRA_SECTION_01;
-        
+
         int prepareSync(SyncSource** sources) EXTRA_SECTION_01;
         
         int sync() EXTRA_SECTION_01;
@@ -65,7 +79,9 @@
             BCHAR* dataType;
         };
 
-        SyncManagerConfig& config;
+        SyncClient &client;
+        SyncManagerConfig &config;
+
         CredentialHandler credentialHandler;
         SyncMLBuilder syncMLBuilder;
         SyncMLProcessor syncMLProcessor;
--- native/src/include/posix/http/CurlTransportAgent.h~client-version-useragent
+++ native/src/include/posix/http/CurlTransportAgent.h
@@ -55,6 +55,7 @@
         ~CurlTransportAgent();
 
         char* sendMessage(const char* msg);
+        void setUserAgent(BCHAR* ua);
 
     };
 
